/***************************************************************************
                          psbws_simulationsobjekt.cpp  -  description
                             -------------------
    begin                : Tue Jul 29 2003
    copyright            : (C) 2003 by Mathias Sikos
    email                : sikosmathias@aol.com
 ***************************************************************************/


#include "psbws_simulationsobjekt.h"
#include "psbws_objekt_manager.h"
#include "psbws_auswirkung_api_manager.h"
#include "psbws_reaktion_api_manager.h"

#include "psbws_event.h"
#include "psbws_position.h"

#include "psbws_number_types.h"
#include "psbws_types.h"

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                    CONSTRUCTOR / DESTRUCTOR
///////////////////////////////////////////////////////////////////

PSBWS_SimulationObject::PSBWS_SimulationObject(PSBWS_Object_Manager* aP_objectManager, STR_3D 
astr_3D) {
	mP_objectManager = aP_objectManager;
	mP_position = new PSBWS_Position(aP_objectManager->get_simulation(), astr_3D);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

PSBWS_SimulationObject::~PSBWS_SimulationObject()
{
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                    POSITION HANDLING
///////////////////////////////////////////////////////////////////

PSBWS_Position* PSBWS_SimulationObject::get_position()
{
		return mP_position;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void PSBWS_SimulationObject::set_positionX(TNatural au_X)
{
		mP_position->set_x(au_X);
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void PSBWS_SimulationObject::set_positionY(TNatural au_Y)
{
		mP_position->set_y(au_Y);

}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void PSBWS_SimulationObject::set_positionZ(TNatural au_Z)
{
		mP_position->set_z(au_Z);
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                    EVENT HANDLING
///////////////////////////////////////////////////////////////////

PSBWS_Event* PSBWS_SimulationObject::get_event()
{
		return mP_releasedEvent;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void PSBWS_SimulationObject::set_event(PSBWS_Event* aP_event)
{
		mP_releasedEvent = aP_event;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void PSBWS_SimulationObject::delete_event()
{
		mP_releasedEvent = NULL;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

int PSBWS_SimulationObject::determine_influence(PSBWS_Event* aP_event)
{
		TUChar lu_type = aP_event->get_type();
		mP_objectManager->get_manager_effectAPI()->calculate(lu_type, this, mu_effectType_event[lu_type]);
		mP_objectManager->get_manager_reactionAPI()->calculate(lu_type, this, mu_reactionType_event[lu_type]);
		return 0;
}
 
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                    ACTION HANDLING
///////////////////////////////////////////////////////////////////
 
PSBWS_Actioner* PSBWS_SimulationObject::get_actioner()
{
  return mP_actioner;
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                    ATTRIBUTE HANDLING
///////////////////////////////////////////////////////////////////

void PSBWS_SimulationObject::set_illness(TPositive au_value)
{
  mu_illness = au_value;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

STR_AttributeCalculatorMatrix* PSBWS_SimulationObject::get_attribute_calculator_matrix()
{
  return mSTRa_attributeCalculatorMatrix;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

TPositive* PSBWS_SimulationObject::get_attribute_array()
{
  return mua_attributes;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void PSBWS_SimulationObject::set_attribute_array(float* lfa_attributes)
{
  unsigned short int lu_i;
  
  for (lu_i = 0; lu_i < 12; lu_i++)
     mua_attributes[lu_i] = (TPositive) lfa_attributes[lu_i];
}
